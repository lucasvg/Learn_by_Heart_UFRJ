package com.learnbyheart.greenDao.gen.bean;


import java.util.List;

import com.learnbyheart.greenDao.gen.dao.DaoSession;
import com.learnbyheart.greenDao.gen.dao.ExampleDao;
import com.learnbyheart.greenDao.gen.dao.MeaningDao;
import com.learnbyheart.greenDao.gen.dao.WordDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MEANING.
 */
public class Meaning {

    private Long id;
    /** Not-null value. */
    private String meaning;
    private long wordId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MeaningDao myDao;

    private Word word;
    private Long word__resolvedKey;

    private List<Example> examples;

    public Meaning() {
    }

    public Meaning(Long id) {
        this.id = id;
    }

    public Meaning(Long id, String meaning, long wordId) {
        this.id = id;
        this.meaning = meaning;
        this.wordId = wordId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMeaningDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMeaning() {
        return meaning;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMeaning(String meaning) {
        this.meaning = meaning;
    }

    public long getWordId() {
        return wordId;
    }

    public void setWordId(long wordId) {
        this.wordId = wordId;
    }

    /** To-one relationship, resolved on first access. */
    public Word getWord() {
        long __key = this.wordId;
        if (word__resolvedKey == null || !word__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WordDao targetDao = daoSession.getWordDao();
            Word wordNew = targetDao.load(__key);
            synchronized (this) {
                word = wordNew;
            	word__resolvedKey = __key;
            }
        }
        return word;
    }

    public void setWord(Word word) {
        if (word == null) {
            throw new DaoException("To-one property 'wordId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.word = word;
            wordId = word.getId();
            word__resolvedKey = wordId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Example> getExamples() {
        if (examples == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExampleDao targetDao = daoSession.getExampleDao();
            List<Example> examplesNew = targetDao._queryMeaning_Examples(id);
            synchronized (this) {
                if(examples == null) {
                    examples = examplesNew;
                }
            }
        }
        return examples;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetExamples() {
        examples = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
    
    @Override
    public String toString() {
    	return this.meaning;
    }

    public String toXMLString(){
    	String str= "";
    	str += "<meaning>";
    	str += "<id>" + this.id + "</id>";
    	str += "<name>" + this.meaning + "</name>";
    	str += "<wordId>" + this.wordId + "</wordId>";
    	
//    	exampels
    	getExamples();
    	for (Example example: examples) {
				str += example.toXMLString();
		}
    	
    	str += "</meaning>";
    	return str;
    }
    
}
