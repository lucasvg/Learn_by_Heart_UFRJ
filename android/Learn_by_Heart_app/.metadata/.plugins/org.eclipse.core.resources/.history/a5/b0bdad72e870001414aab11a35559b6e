package com.learnbyheart.activity;

import java.util.List;

import android.content.Intent;
import android.content.res.Resources.NotFoundException;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;
import android.widget.ToggleButton;

import com.learnbyheart.GLOBAL;
import com.learnbyheart.R;
import com.learnbyheart.greenDao.gen.bean.Dictionary;
import com.learnbyheart.greenDao.gen.bean.Language;
import com.learnbyheart.greenDao.gen.bean.User;
import com.learnbyheart.greenDao.gen.bean.UserType;
import com.learnbyheart.greenDao.gen.dao.DaoMaster;
import com.learnbyheart.greenDao.gen.dao.DaoMaster.DevOpenHelper;
import com.learnbyheart.greenDao.gen.dao.DaoSession;
import com.learnbyheart.greenDao.gen.dao.DictionaryDao;
import com.learnbyheart.greenDao.gen.dao.LanguageDao;
import com.learnbyheart.greenDao.gen.dao.UserDao;
import com.learnbyheart.greenDao.gen.dao.UserTypeDao;

public class AddEditDictionaryActivity extends ActionBarActivity {
	private SQLiteDatabase db;
	private DaoMaster daoMaster;
	private DaoSession daoSession;
	private LanguageDao languageDao;
	private DictionaryDao dictionaryDao;
	private UserDao userDao;
	private UserTypeDao userTypeDao;

	//saved languageList instead of LanguageDao, 'cause the last won't be altered during the lifecycle of the activity
	private List<Language> languageList;
	
	private EditText etName;
	private Spinner spDictionaryLanguage;
	private ToggleButton tbIsPublic;
	
	Dictionary dictionary;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_add_edit_dictionary);

		// LOAD DB
		DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, GLOBAL.DB_NAME, null);
		db = helper.getWritableDatabase();
		daoMaster = new DaoMaster(db);
		daoSession = daoMaster.newSession();
		dictionaryDao = daoSession.getDictionaryDao();
		languageDao = daoSession.getLanguageDao();
		userDao = daoSession.getUserDao();
		userTypeDao = daoSession.getUserTypeDao();
		
		//LOAD LanguageDao
		languageList = languageDao.loadAll();
		
		etName = (EditText) findViewById(R.id.activity_add_edit_dictionary_et_dictionary_name);
		spDictionaryLanguage = (Spinner) findViewById(R.id.activity_add_edit_dictionary_sp_dictionary_language);
		tbIsPublic = (ToggleButton) findViewById(R.id.activity_add_edit_dictionary_tb_dictionary_is_public);
		
		ArrayAdapter<CharSequence> adapter = new ArrayAdapter<CharSequence> (this, android.R.layout.simple_spinner_item );
		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		for (Language language : languageList) { adapter.add(language.getDescription()); }
		spDictionaryLanguage.setAdapter(adapter);

		// if it's editing a dictionary (not adding a new one)
		Intent i = getIntent();
		Long _id = i.getLongExtra("_id", -1L);
		if(_id == -1L){
//			dictionary = new Dictionary(null, "", false, false, 0L, 1L, 0L);
			dictionary = new Dictionary();
		}else{
			dictionary = dictionaryDao.load(_id);
			if(dictionary == null)
				finish();
		}
		etName.setText(dictionary.getName());

		if(dictionary.getId() != null){
			spDictionaryLanguage.setSelection(indexOfLanguage(dictionary.getLanguage().getDescription()));
		tbIsPublic.setChecked(dictionary.getIsPublic());
		}
	}
	
	private Integer indexOfLanguage(String languageDescription){
		if(languageDescription == null)
			return null;

		Integer i = 0;
		for (Language language : languageList) {
			if(language.getDescription().equals(languageDescription))
				return i;
			else
				i++;
		}
		
		return null;
	}

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_save_cancel, menu);
        return true;
    }
    
	public boolean onOptionsItemSelected(MenuItem item) {
		int itemId = item.getItemId();
		if (itemId == R.id.btnActionBar_cancel) {
			finish();
		} else if (itemId == R.id.btnActionBar_save) {
			try {
				if (etName.getText().toString().equals("")) {
					Toast.makeText(getApplicationContext(),
							R.string.btn_dictionary_activity_no_name,
							Toast.LENGTH_LONG).show();
				} else {
					
					// WORKAROUND the dependencies of the dictionary - User and UserType
					try {
						List<User> userList = userDao.loadAll();
						if(userList!= null && userList.size() == 1){
							Log.e("creating user and userType artificially", "creating user and userType artificially");
							userTypeDao.insert(new UserType(1L, "student"));
							userDao.insert(new User(1L, "testStudent", "user", "pwd", "user@test.com", 1L));
						}
						dictionary.setUserId(1L);
					} catch (Exception e) {
						Log.e("WORKAROUND dependencies of dictionary", e.toString());
					}
					// end WORKAROUND
					
					dictionary.setName(etName.getText().toString());
					dictionary.setLanguage(languageList.get(spDictionaryLanguage.getSelectedItemPosition()));
					dictionary.setIsPublic(tbIsPublic.isChecked());
					
					if(dictionary.getId() == null){
						dictionaryDao.insert(dictionary);
					}else{
						dictionaryDao.update(dictionary);
					}

					this.setResult(RESULT_OK);
					finish();
				}
			} catch (NotFoundException e) {
				Log.e("ERROR ON OPTIONS ITEM SELECTED", e.toString());
			}
		}
		return true;
	}
	
	@Override
	protected void onDestroy() {
		db.close();
		super.onDestroy();
	}
}