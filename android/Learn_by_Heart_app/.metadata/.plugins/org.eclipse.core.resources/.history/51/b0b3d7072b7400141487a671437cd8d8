package com.learnbyheart;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;

import com.learnbyheart.greenDao.gen.bean.Language;

public class GLOBAL {
	public static final String DB_NAME = "db_learnbyheart";
	public static final String TOKEN = "|";
	public static final String MyPREFERENCES = "LearnbyHeartSharedPreferences" ;
	public static final String USER_LOGGED_SESSION = "userLoggedSession";
	public static final String USER_LOGGED_ID = "userLoggedId";
	public static final String dictionaryId = "dictionary_id";
	public static final String wordId = "word_id";
	public static final String meaningId = "meaning_id";
	
	public static final String hasOpenedLoginActivity = "hasOpenedLoginActivity";
	
//	use ifconfig in linux to get actual ip
	private static final String IP = "54.173.106.139";
	
	public static final String urlLogin(String userLogin, String pwd){
		return String.format("http://" + IP + "/axis2/services/service/lazyLogin?userLogin=%s&pwd=%s", userLogin, pwd);
	}
	
	public static final String urlSignup(String name, String userLogin, String pwd, String email){
		return String.format("http://" + IP + "/axis2/services/service/createUser?name=%s&login=%s&password=%s&email=%s", name, userLogin, pwd, email);
	}
	
	public static final String urlGetLanguages(String sessionHash){
		return String.format("http://" + IP + "/axis2/services/service/getLanguages?sessionHash=%s", sessionHash);
	}
	
	public static final String urlSendData(String sessionHash, String data){
		return String.format("http://" + IP + "/axis2/services/service/getLanguages?sessionHash=%s&data=%s", sessionHash, data);
	}
	
	
	public static final Language parseLanguageWithToken(String languageString){
		Language language = new Language();
		String[] parts = languageString.split("\\|");
		language.setId(Long.parseLong(parts[0]));
		language.setDescription(parts[1]);
		language.setCode(parts[2]);
		return language;
	}
	
	public static final InputStream OpenHttpConnection(String urlString) throws IOException {
		InputStream in = null;
		int response = -1;

		// Toast.makeText(getApplicationContext(),
		// "urlString=" + urlString , Toast.LENGTH_LONG).show();

		try {
			URL url = new URL(urlString);
			URLConnection conn = url.openConnection();

			// if (!(conn instanceof HttpURLConnection))
			// throw new IOException("Not an HTTP connection");

			HttpURLConnection httpConn = (HttpURLConnection) conn;

			// httpConn.setAllowUserInteraction(false);
			// httpConn.setInstanceFollowRedirects(false);
			// httpConn.setRequestMethod("GET");
			// httpConn.setUseCaches(false);
			// httpConn.setConnectTimeout(25000 /* milliseconds */);
			// httpConn.setReadTimeout(15000/*10000*/ /* milliseconds */);
			httpConn.setDoOutput(true);
			httpConn.setDoInput(true);

			httpConn.connect();

			response = httpConn.getResponseCode();
			if (response == HttpURLConnection.HTTP_OK) {
				// in = httpConn.getInputStream();
				in = new BufferedInputStream(httpConn.getInputStream());
			} else {
				throw new Exception();
			}

		} catch (Exception ex) {
			throw new IOException("Error connecting");
		}
		return in;
	}
}
