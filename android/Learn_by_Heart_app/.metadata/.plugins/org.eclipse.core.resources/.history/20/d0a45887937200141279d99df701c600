package com.learnbyheart.greenDao.gen.bean;


import java.util.List;

import org.w3c.dom.NodeList;

import com.learnbyheart.greenDao.gen.dao.DaoSession;
import com.learnbyheart.greenDao.gen.dao.ExampleDao;
import com.learnbyheart.greenDao.gen.dao.LogExampleNotificationDao;
import com.learnbyheart.greenDao.gen.dao.MeaningDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EXAMPLE.
 */
public class Example {

    private Long id;
    /** Not-null value. */
    private String example;
    private long meaningId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExampleDao myDao;

    private Meaning meaning;
    private Long meaning__resolvedKey;

    private List<LogExampleNotification> logExampleNotifications;

    public Example() {
    }

    public Example(Long id) {
        this.id = id;
    }

    public Example(Long id, String example, long meaningId) {
        this.id = id;
        this.example = example;
        this.meaningId = meaningId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExampleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getExample() {
        return example;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setExample(String example) {
        this.example = example;
    }

    public long getMeaningId() {
        return meaningId;
    }

    public void setMeaningId(long meaningId) {
        this.meaningId = meaningId;
    }

    /** To-one relationship, resolved on first access. */
    public Meaning getMeaning() {
        long __key = this.meaningId;
        if (meaning__resolvedKey == null || !meaning__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MeaningDao targetDao = daoSession.getMeaningDao();
            Meaning meaningNew = targetDao.load(__key);
            synchronized (this) {
                meaning = meaningNew;
            	meaning__resolvedKey = __key;
            }
        }
        return meaning;
    }

    public void setMeaning(Meaning meaning) {
        if (meaning == null) {
            throw new DaoException("To-one property 'meaningId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.meaning = meaning;
            meaningId = meaning.getId();
            meaning__resolvedKey = meaningId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LogExampleNotification> getLogExampleNotifications() {
        if (logExampleNotifications == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LogExampleNotificationDao targetDao = daoSession.getLogExampleNotificationDao();
            List<LogExampleNotification> logExampleNotificationsNew = targetDao._queryExample_LogExampleNotifications(id);
            synchronized (this) {
                if(logExampleNotifications == null) {
                    logExampleNotifications = logExampleNotificationsNew;
                }
            }
        }
        return logExampleNotifications;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLogExampleNotifications() {
        logExampleNotifications = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
    
    @Override
    public String toString() {
    	return this.example;
    }
    
    public String toXMLString(){
    	String str= "";
    	str += "<example>";
    	str += "<id>" + this.id + "</id>";
    	str += "<name>" + this.example + "</name>";
    	str += "<meaningId>" + this.meaningId + "</meaningId>";
    	str += "</example>";
    	return str;
    }
    
    public static Example fromXMLString(NodeList nodeList){
    	if(nodeList == null)
    		return null;
    	Example example = new Example();
    	example.setId(Long.getLong(nodeList.item(0).getTextContent()));
    	example.setExample(nodeList.item(1).getTextContent());
    	example.setMeaningId(Long.getLong(nodeList.item(2).getTextContent()));
    	return example;
    }

}
