package com.learnbyheart.greenDao.gen.bean;


import java.util.List;

import com.learnbyheart.greenDao.gen.dao.DaoSession;
import com.learnbyheart.greenDao.gen.dao.DictionaryDao;
import com.learnbyheart.greenDao.gen.dao.MeaningDao;
import com.learnbyheart.greenDao.gen.dao.WordDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WORD.
 */
public class Word {

    private Long id;
    /** Not-null value. */
    private String word;
    private long dictionaryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WordDao myDao;

    private Dictionary dictionary;
    private Long dictionary__resolvedKey;

    private List<Meaning> meanings;

    public Word() {
    }

    public Word(Long id) {
        this.id = id;
    }

    public Word(Long id, String word, long dictionaryId) {
        this.id = id;
        this.word = word;
        this.dictionaryId = dictionaryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getWord() {
        return word;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setWord(String word) {
        this.word = word;
    }

    public long getDictionaryId() {
        return dictionaryId;
    }

    public void setDictionaryId(long dictionaryId) {
        this.dictionaryId = dictionaryId;
    }

    /** To-one relationship, resolved on first access. */
    public Dictionary getDictionary() {
        long __key = this.dictionaryId;
        if (dictionary__resolvedKey == null || !dictionary__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DictionaryDao targetDao = daoSession.getDictionaryDao();
            Dictionary dictionaryNew = targetDao.load(__key);
            synchronized (this) {
                dictionary = dictionaryNew;
            	dictionary__resolvedKey = __key;
            }
        }
        return dictionary;
    }

    public void setDictionary(Dictionary dictionary) {
        if (dictionary == null) {
            throw new DaoException("To-one property 'dictionaryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dictionary = dictionary;
            dictionaryId = dictionary.getId();
            dictionary__resolvedKey = dictionaryId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Meaning> getMeanings() {
        if (meanings == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MeaningDao targetDao = daoSession.getMeaningDao();
            List<Meaning> meaningsNew = targetDao._queryWord_Meanings(id);
            synchronized (this) {
                if(meanings == null) {
                    meanings = meaningsNew;
                }
            }
        }
        return meanings;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMeanings() {
        meanings = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
    
    @Override
    public String toString() {
    	return this.word;
    }

    public String toXMLString(){
    	String str= "";
    	str += "<word>";
    	str += "<id>" + this.id + "</id>";
    	str += "<name>" + this.word + "</name>";
    	str += "<dictionaryId>" + this.dictionaryId + "</dictionaryId>";
    	
    	
    	// meanings
    	if(meanings != null){
			for (Meaning meaning: meanings) {
	//			str += meaning.getToXMLString();
			}
    	}
    	
    	str += "</dictionary>";
    	return str;
    }

}
